import{_ as i,c as a,o as t,al as n}from"./chunks/framework.DylzA-Fb.js";const o=JSON.parse('{"title":"@use-gesture-x/vue3 配置选项说明文档","description":"","frontmatter":{},"headers":[],"relativePath":"zh/options.md","filePath":"zh/options.md"}'),e={name:"zh/options.md"};function l(h,s,p,k,r,d){return t(),a("div",null,[...s[0]||(s[0]=[n(`<h1 id="use-gesture-x-vue3-配置选项说明文档" tabindex="-1">@use-gesture-x/vue3 配置选项说明文档 <a class="header-anchor" href="#use-gesture-x-vue3-配置选项说明文档" aria-label="Permalink to &quot;@use-gesture-x/vue3 配置选项说明文档&quot;">​</a></h1><h3 id="vue-手势交互" tabindex="-1">Vue 手势交互 <a class="header-anchor" href="#vue-手势交互" aria-label="Permalink to &quot;Vue 手势交互&quot;">​</a></h3><p>导出了几个可以处理不同手势的钩子函数。</p><table tabindex="0"><thead><tr><th>Hook</th><th>描述</th></tr></thead><tbody><tr><td><code>useDrag</code></td><td>处理拖拽手势</td></tr><tr><td><code>useMove</code></td><td>处理鼠标移动事件</td></tr><tr><td><code>useHover</code></td><td>处理鼠标悬停事件</td></tr><tr><td><code>useScroll</code></td><td>处理滚动事件</td></tr><tr><td><code>useWheel</code></td><td>处理滚轮事件</td></tr><tr><td><code>usePinch</code></td><td>处理缩放、旋转手势</td></tr><tr><td><code>useGesture</code></td><td>处理多个手势在一个钩子中</td></tr></tbody></table><h3 id="gesture-事件回调" tabindex="-1">Gesture 事件回调 <a class="header-anchor" href="#gesture-事件回调" aria-label="Permalink to &quot;Gesture 事件回调&quot;">​</a></h3><blockquote><p>所有事件回调都接收一个状态对象作为参数，该对象包含有关手势事件的详细信息。</p></blockquote><div class="language-jsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    onDrag</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">state</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> doSomethingWith</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">state</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    onDragStart</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">state</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> doSomethingWith</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">state</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    onDragEnd</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">state</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> doSomethingWith</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">state</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    onPinch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">state</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> doSomethingWith</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">state</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    onPinchStart</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">state</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> doSomethingWith</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">state</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    onPinchEnd</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">state</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> doSomethingWith</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">state</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    onScroll</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">state</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> doSomethingWith</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">state</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    onScrollStart</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">state</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> doSomethingWith</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">state</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    onScrollEnd</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">state</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> doSomethingWith</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">state</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    onMove</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">state</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> doSomethingWith</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">state</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    onMoveStart</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">state</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> doSomethingWith</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">state</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    onMoveEnd</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">state</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> doSomethingWith</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">state</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    onWheel</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">state</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> doSomethingWith</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">state</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    onWheelStart</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">state</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> doSomethingWith</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">state</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    onWheelEnd</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">state</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> doSomethingWith</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">state</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    onHover</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">state</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> doSomethingWith</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">state</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="gesture-回调函数接收的参数定义" tabindex="-1">Gesture 回调函数接收的参数定义 <a class="header-anchor" href="#gesture-回调函数接收的参数定义" aria-label="Permalink to &quot;Gesture 回调函数接收的参数定义&quot;">​</a></h3><blockquote><p>所有事件回调都接收一个状态对象作为参数，下面是详细介绍状态对象的信息。</p></blockquote><div class="language-jsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> bind</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> useXXXX</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">state</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    event</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">         // 源事件</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    xy</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">            // [x,y] 值（指针位置或滚动偏移量</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    initial</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">       // 手势开始时的 xy 值</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    intentional</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">   // 是否是有意的手势</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    delta</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">         // 移动增量（移动 - 上一个移动）</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    offset</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 自第一次手势以来的偏移量</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    lastOffset</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 上一个手势开始时的偏移量</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    movement</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">      // 偏移量与 lastOffset 的位移</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    velocity</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">      // 手势每轴的动量（单位：px/ms）</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    distance</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">      // 每个轴的偏移量距离</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    direction</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     // 每个轴的方向</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    overflow</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">      // 是否超出边界（每个轴）</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    startTime</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     // 手势开始时间（ms）</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    timeDelta</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     // 与前一个事件的时间差（ms）</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    elapsedTime</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">   // 手势已用时间（ms）</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    timeStamp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     // 事件的时间戳（ms）</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    type</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">          // 事件类型</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    target</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 事件目标元素</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    currentTarget</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 事件当前目标元素</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    first</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">         // 当它是第一个事件时为 true</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    last</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">          // 当它是最后一个事件时为 true</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    active</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 当手势活动时为 true</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    memo</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">          // 上一次处理器运行返回的值</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    cancel</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 你可以调用的用于中断某些手势的函数</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    canceled</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">      // 当手势被取消（drag and pinch）时为 true</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    down</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">          // 当鼠标按钮或触摸点接触屏幕时为 true</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    buttons</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">       // 按下的按钮数量</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    touches</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">       // 接触屏幕的手指数量</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    args</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">          // 传递给 bind 函数的参数（React 仅支持）</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    ctrlKey</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">       // 当 control 键被按下时为 true</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    altKey</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // &quot;      &quot;  alt     &quot;      &quot;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    shiftKey</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">      // &quot;      &quot;  shift   &quot;      &quot;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    metaKey</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">       // &quot;      &quot;  meta    &quot;      &quot;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    locked</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // document.pointerLockElement 是否已设置</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    dragging</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">      // is the component currently being dragged</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    moving</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // &quot;              &quot;              &quot;  moved</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    scrolling</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     // &quot;              &quot;              &quot;  scrolled</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    wheeling</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">      // &quot;              &quot;              &quot;  wheeled</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    pinching</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">       // &quot;              &quot;              &quot;  pinched</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  }</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> state</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div><h3 id="gesture-配置选项" tabindex="-1">Gesture 配置选项 <a class="header-anchor" href="#gesture-配置选项" aria-label="Permalink to &quot;Gesture 配置选项&quot;">​</a></h3><p>以下是可应用于手势的所有选项。</p><blockquote><p>并非所有选项都适用于所有手势。在下表中，xy 代表基于坐标的手势，包括拖动（drag）、移动（move）、滚轮（wheel）和滚动（scroll）。</p></blockquote><table tabindex="0"><thead><tr><th>配置项</th><th style="text-align:center;">手势</th><th>描述</th></tr></thead><tbody><tr><td><a href="#enabled"><code>enabled</code></a></td><td style="text-align:center;"><strong>all</strong></td><td>该手势是否启用.</td></tr><tr><td><a href="#eventoptions"><code>eventOptions</code></a></td><td style="text-align:center;">允许你自定义事件是采用被动模式还是捕获模式。此设置会覆盖共享选项。</td><td></td></tr><tr><td><a href="#from"><code>from</code></a></td><td style="text-align:center;"><strong>all</strong></td><td>初始位置offset应该从…… 开始. 例如：<code>from: [0, 0]</code> 表示初始位置offset应该从 <code>[0, 0]</code> 开始.</td></tr><tr><td><a href="#threshold"><code>threshold</code></a></td><td style="text-align:center;"><strong>all</strong></td><td>只有当手势位移大于阈值时，处理器才会触发。.</td></tr><tr><td><a href="#preventdefault"><code>preventDefault</code></a></td><td style="text-align:center;"><strong>all</strong></td><td>将阻止由处理程序触发的所有事件的preventDefault.</td></tr><tr><td><a href="#triggerallevents"><code>triggerAllEvents</code></a></td><td style="text-align:center;"><strong>all</strong></td><td>强制处理器即使在非故意位移的情况下也会触发（忽略threshold）。在这种情况下，状态中的intentional属性将保持为false，直到达到阈值。</td></tr><tr><td><a href="#axis"><code>axis</code></a></td><td style="text-align:center;"><strong>all</strong></td><td>只有在指定轴上检测到移动时，你的处理器才会触发。</td></tr><tr><td><a href="#axisthreshold"><code>axisThreshold</code></a></td><td style="text-align:center;"><strong>xy</strong></td><td>轴是根据阈值计算的。对于拖动操作，阈值按设备类型指定。</td></tr><tr><td><a href="#bounds"><code>bounds</code></a></td><td style="text-align:center;"><strong>xy</strong></td><td>将手势 “偏移量” 限制在指定范围内</td></tr><tr><td><a href="#scalebounds"><code>scaleBounds</code></a></td><td style="text-align:center;"><strong>pinch</strong></td><td>将缩放 “偏移量” 限制在指定范围内。</td></tr><tr><td><a href="#anglebounds"><code>angleBounds</code></a></td><td style="text-align:center;"><strong>pinch</strong></td><td>将角度 “偏移量” 限制在指定范围内.</td></tr><tr><td><a href="#modifierkey"><code>modifierKey</code></a></td><td style="text-align:center;"><strong>pinch</strong></td><td>滚动时触发缩放的修饰键。默认为 &#39;ctrlKey&#39;。可以为 null。</td></tr><tr><td><code>pinchOnWheel</code></td><td style="text-align:center;"><strong>pinch</strong></td><td>如果为 false，则会禁用滚轮捏合操作。</td></tr><tr><td><a href="#rubberband"><code>rubberband</code></a></td><td style="text-align:center;"><strong>all</strong></td><td>手势越界时的弹性系数。当设置为true时，弹性系数将默认为0.15</td></tr><tr><td><a href="#transform"><code>transform</code></a></td><td style="text-align:center;"><strong>all</strong></td><td>一个可用于转换指针值的函数。它有助于将屏幕坐标映射到自定义空间坐标，例如画布坐标。</td></tr><tr><td><a href="#filtertaps"><code>filterTaps</code></a></td><td style="text-align:center;"><strong>drag</strong></td><td>如果为true，则当用户只是点击该组件时，该组件不会触发你的拖动逻辑。</td></tr><tr><td><a href="#tapsthreshold"><code>tapsThreshold</code></a></td><td style="text-align:center;"><strong>drag</strong></td><td>使用filterTaps选项时，自定义位移触发的轻触次数。默认值为3。</td></tr><tr><td><a href="#preventscroll"><code>preventScroll</code></a></td><td style="text-align:center;"><strong>drag</strong></td><td>如果设置了该参数，拖动将在延迟时长（以ms为单位）后触发，并且会阻止窗口滚动。当设置为true时，preventScroll的默认值为 250 毫秒。</td></tr><tr><td><a href="#preventscrollaxis"><code>preventScrollAxis</code></a></td><td style="text-align:center;"><strong>drag</strong></td><td>如果设置了该属性，除非超过了 preventScroll 的持续时间，否则拖动将允许沿坐标轴方向滚动。默认情况下仅为 “y” 轴。</td></tr><tr><td><a href="#pointertouch"><code>pointer.touch</code></a></td><td style="text-align:center;"><strong>drag,pinch</strong></td><td>如果为 true，则在支持触摸的设备上，拖动和捏合操作将使用触摸事件。<a href="#pointertouch">详情</a>.</td></tr><tr><td><a href="#pointercapture"><code>pointer.capture</code></a></td><td style="text-align:center;"><strong>drag</strong></td><td>如果为 false，拖动将不会使用 setPointerCapture，也不会将 pointerMove 事件附加到窗口 <a href="#pointercapture">详情</a>.</td></tr><tr><td><code>pointer.mouse</code></td><td style="text-align:center;"><strong>drag</strong></td><td>如果为true，则在可能的情况下，拖拽将使用鼠标事件监听器而非指针监听器。</td></tr><tr><td><a href="#pointerbuttons"><code>pointer.buttons</code></a></td><td style="text-align:center;"><strong>drag</strong></td><td>触发拖动手势的按钮组合. <a href="#pointerbuttons">详情</a>.</td></tr><tr><td><a href="#pointerlock"><code>pointer.lock</code></a></td><td style="text-align:center;"><strong>drag</strong></td><td>如果为 true，指针将在拖动开始时进入指针锁定模式，并在拖动结束时退出指针锁定模式。. <a href="#pointerlock">Read more below</a>.</td></tr><tr><td><a href="#pointerkeys"><code>pointer.keys</code></a></td><td style="text-align:center;"><strong>drag</strong></td><td>默认情况下，当可拖动元素获得焦点时，拖动手势可通过方向键触发。将keys设置为false则不会添加键盘事件监听器。</td></tr><tr><td><a href="#delay"><code>delay</code></a></td><td style="text-align:center;"><strong>drag</strong></td><td>如果设置了该处理程序，它将延迟一段时间（以ms为单位）—— 或者在用户开始移动时延迟。当设置为true时，delay的默认值为 180 毫秒。</td></tr><tr><td><a href="#swipedistance"><code>swipe.distance</code></a></td><td style="text-align:center;"><strong>drag</strong></td><td>拖动手势需要移动的每个轴的最小距离（以 “像素” 为单位），以触发滑动。</td></tr><tr><td><a href="#swipevelocity"><code>swipe.velocity</code></a></td><td style="text-align:center;"><strong>drag</strong></td><td>拖动手势在指针释放前需要达到的每个轴的最小速度（单位为像素/毫秒）。</td></tr><tr><td><a href="#swipeduration"><code>swipe.duration</code></a></td><td style="text-align:center;"><strong>drag</strong></td><td>检测到一次滑动的最长持续时间（以毫秒为单位）。</td></tr><tr><td><code>keyboardDisplacement</code></td><td style="text-align:center;"><strong>drag</strong></td><td>箭头键模拟的距离（以像素为单位）。默认值为10。</td></tr><tr><td><code>mouseOnly</code></td><td style="text-align:center;"><strong>hover, move</strong></td><td>如果希望在非鼠标事件上触发hover（悬停）或move（移动）处理器，请将其设置为false。在需要在支持触摸的设备上执行逻辑的情况下，这是一个很有用的选项。</td></tr></tbody></table>`,14)])])}const y=i(e,[["render",l]]);export{o as __pageData,y as default};
